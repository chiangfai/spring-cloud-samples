/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
plugins {
    id 'org.springframework.boot' version '2.1.5.RELEASE'
    id 'java'
}

apply from:'dependencies.gradle'

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group = 'org.springcloud'
    version = '0.0.1-SNAPSHOT'

    // default build dir is build/ but idea compile dir is out/
    // dir out/ just have production/ and test/ dir
    buildDir = 'out/build'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        //mavenCentral()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }

    sourceSets {
        main {
            java {
                srcDir 'source/java'
            }
            resources {
                srcDir 'config'
            }
        }

        test {
            java {
                srcDir 'source/test-java'
            }
            resources {
                srcDir 'source/test-resources'
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:Cairo-SR7'
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Finchley.SR3"
        }
    }

    dependencies {

        // 查看依赖 gradle :config-server:dependencies --configuration implementation --scan

        testCompile 'org.springframework.boot:spring-boot-starter-test'

        compileOnly libs['lombok']
        annotationProcessor libs['lombok']

        //添加本地第三方依赖
        //compile fileTree(dir: 'third-libs', include: ['*.jar'])
    }

    task listJars {
        //getProject().dependencies.each { File file -> println file.name };
       // configurations.compile.each { File file -> println file.name }
        println configurations.implementation
        //+ configurations.testCompile
        //jars.each { File file -> println file.name }

        //configurations.compile.each { File file -> println file.name }
        //configurations.testCompile.each { File file -> println file.name }
    }

    clean.doFirst {
        delete 'out'
    }
}